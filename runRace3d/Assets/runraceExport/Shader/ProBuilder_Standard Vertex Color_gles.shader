Shader "ProBuilder/Standard Vertex Color" {
Properties {
_MainTex ("Base Color", 2D) = "white" { }
_BumpMap ("Normal Map", 2D) = "bump" { }
_Color ("Color", Color) = (1,1,1,1)
_Metallic ("Metallic", Range(0, 1)) = 0
_Gloss ("Gloss", Range(0, 1)) = 0.8
}
SubShader {
 Tags { "RenderType" = "Opaque" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 19667
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
float u_xlat11;
float u_xlat13;
float u_xlat14;
mediump vec3 u_xlat16_17;
float u_xlat23;
bool u_xlatb23;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat30) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat30) * u_xlat1.xyz;
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat3.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
    u_xlat31 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat13 = _Gloss * _Gloss;
    u_xlat23 = u_xlat13 * u_xlat13;
    u_xlat33 = u_xlat30 * u_xlat23 + (-u_xlat30);
    u_xlat30 = u_xlat33 * u_xlat30 + 1.0;
    u_xlat30 = u_xlat30 * u_xlat30 + 1.00000001e-07;
    u_xlat23 = u_xlat23 * 0.318309873;
    u_xlat30 = u_xlat23 / u_xlat30;
    u_xlat23 = min(u_xlat3.x, 1.0);
    u_xlat33 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat14 = abs(u_xlat33) * u_xlat4.x + u_xlat13;
    u_xlat4.x = u_xlat23 * u_xlat4.x + u_xlat13;
    u_xlat13 = u_xlat13 * _Gloss;
    u_xlat13 = (-u_xlat13) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat33) * u_xlat4.x;
    u_xlat4.x = u_xlat23 * u_xlat14 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat30 = u_xlat30 * 3.14159274;
    u_xlat30 = max(u_xlat30, 9.99999975e-05);
    u_xlat30 = sqrt(u_xlat30);
    u_xlat30 = u_xlat23 * u_xlat30;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat30 = u_xlat30 * u_xlat23;
    u_xlat5.xyz = vec3(u_xlat30) * _LightColor0.xyz;
    u_xlat30 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat30 = u_xlat30 + u_xlat30;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat30)) + (-u_xlat1.xyz);
    u_xlat30 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat30) + 1.0;
    u_xlat16_32 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat1.x * u_xlat16_32;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat33) + 1.0;
    u_xlat0.x = -abs(u_xlat33) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat10.x = u_xlat30 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(u_xlat16_37);
    u_xlat10.x = u_xlat10.x + 1.0;
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat10.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_10.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat10.xyz = vec3(u_xlat13) * u_xlat16_10.xyz;
    u_xlat16_32 = (-u_xlat31) + 1.0;
    u_xlat11 = u_xlat31 * u_xlat31;
    u_xlat1.x = dot(vec2(u_xlat11), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_7.x = u_xlat1.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat10.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat10.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_8.xyz + u_xlat10.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
lowp vec4 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat13;
vec3 u_xlat14;
lowp vec3 u_xlat10_14;
mediump vec3 u_xlat16_17;
float u_xlat23;
float u_xlat24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_32;
float u_xlat33;
bool u_xlatb33;
mediump float u_xlat16_37;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat31) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat31 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat13 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat23 = _Gloss * _Gloss;
    u_xlat33 = u_xlat23 * u_xlat23;
    u_xlat4 = u_xlat31 * u_xlat33 + (-u_xlat31);
    u_xlat31 = u_xlat4 * u_xlat31 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat31 + 1.00000001e-07;
    u_xlat33 = u_xlat33 * 0.318309873;
    u_xlat31 = u_xlat33 / u_xlat31;
    u_xlat33 = min(u_xlat13, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat14.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat24 = abs(u_xlat4) * u_xlat14.x + u_xlat23;
    u_xlat14.x = u_xlat33 * u_xlat14.x + u_xlat23;
    u_xlat23 = u_xlat23 * _Gloss;
    u_xlat23 = (-u_xlat23) * 0.280000001 + 1.0;
    u_xlat14.x = u_xlat14.x * abs(u_xlat4);
    u_xlat14.x = u_xlat33 * u_xlat24 + u_xlat14.x;
    u_xlat14.x = u_xlat14.x + 9.99999975e-06;
    u_xlat14.x = 0.5 / u_xlat14.x;
    u_xlat31 = u_xlat31 * u_xlat14.x;
    u_xlat31 = u_xlat31 * 3.14159274;
    u_xlat31 = max(u_xlat31, 9.99999975e-05);
    u_xlat31 = sqrt(u_xlat31);
    u_xlat31 = u_xlat33 * u_xlat31;
    u_xlat14.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_14.xyz = texture2D(_MainTex, u_xlat14.xy).xyz;
    u_xlat14.xyz = u_xlat10_14.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat14.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat14.xyz = u_xlat14.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat33 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb33 = u_xlat33!=0.0;
    u_xlat33 = u_xlatb33 ? 1.0 : float(0.0);
    u_xlat31 = u_xlat31 * u_xlat33;
    u_xlat5.xyz = vec3(u_xlat31) * _LightColor0.xyz;
    u_xlat31 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat31 = u_xlat31 + u_xlat31;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat31)) + (-u_xlat1.xyz);
    u_xlat31 = (-_Gloss) + 1.0;
    u_xlat33 = (-u_xlat31) + 1.0;
    u_xlat16_32 = (-u_xlat33) * 0.699999988 + 1.70000005;
    u_xlat16_32 = u_xlat16_32 * u_xlat33;
    u_xlat16_32 = u_xlat16_32 * 6.0;
    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_32);
    u_xlat16_32 = u_xlat10_6.w + -1.0;
    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(u_xlat16_32);
    u_xlat16_32 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_37 = u_xlat16_32 * u_xlat16_32;
    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_37;
    u_xlat16_37 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat31 + (-u_xlat16_37);
    u_xlat16_8.xyz = u_xlat14.xyz * vec3(u_xlat16_37);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_9.xyz = vec3(u_xlat16_32) * u_xlat16_9.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
    u_xlat11.xyz = vec3(u_xlat23) * u_xlat16_11.xyz;
    u_xlat16_32 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat33));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_7.x = u_xlat3.x + -1.0;
    u_xlat16_17.x = u_xlat16_32 * u_xlat16_32;
    u_xlat16_17.x = u_xlat16_17.x * u_xlat16_17.x;
    u_xlat16_32 = u_xlat16_32 * u_xlat16_17.x;
    u_xlat16_17.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_17.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat5.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat13) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_7.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat13 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * _LightColor0.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump float u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat14;
float u_xlat15;
mediump vec3 u_xlat16_19;
float u_xlat25;
bool u_xlatb25;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat33 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat33) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat33) * u_xlat1.xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
    u_xlat34 = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlat14 = _Gloss * _Gloss;
    u_xlat25 = u_xlat14 * u_xlat14;
    u_xlat36 = u_xlat33 * u_xlat25 + (-u_xlat33);
    u_xlat33 = u_xlat36 * u_xlat33 + 1.0;
    u_xlat33 = u_xlat33 * u_xlat33 + 1.00000001e-07;
    u_xlat25 = u_xlat25 * 0.318309873;
    u_xlat33 = u_xlat25 / u_xlat33;
    u_xlat25 = min(u_xlat3.x, 1.0);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat4.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat15 = abs(u_xlat36) * u_xlat4.x + u_xlat14;
    u_xlat4.x = u_xlat25 * u_xlat4.x + u_xlat14;
    u_xlat14 = u_xlat14 * _Gloss;
    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;
    u_xlat4.x = abs(u_xlat36) * u_xlat4.x;
    u_xlat4.x = u_xlat25 * u_xlat15 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x + 9.99999975e-06;
    u_xlat4.x = 0.5 / u_xlat4.x;
    u_xlat33 = u_xlat33 * u_xlat4.x;
    u_xlat33 = u_xlat33 * 3.14159274;
    u_xlat33 = max(u_xlat33, 9.99999975e-05);
    u_xlat33 = sqrt(u_xlat33);
    u_xlat33 = u_xlat25 * u_xlat33;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_4.xyz = texture2D(_MainTex, u_xlat4.xy).xyz;
    u_xlat4.xyz = u_xlat10_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat4.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = u_xlat4.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat25 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb25 = u_xlat25!=0.0;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat33 = u_xlat33 * u_xlat25;
    u_xlat25 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb25 = vs_TEXCOORD8.z<u_xlat25;
    u_xlat25 = u_xlatb25 ? 1.0 : float(0.0);
    u_xlat25 = max(u_xlat25, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat25) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
    u_xlat33 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat0.xyz * (-vec3(u_xlat33)) + (-u_xlat1.xyz);
    u_xlat33 = (-_Gloss) + 1.0;
    u_xlat1.x = (-u_xlat33) + 1.0;
    u_xlat16_35 = (-u_xlat1.x) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat1.x * u_xlat16_35;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat36) + 1.0;
    u_xlat0.x = -abs(u_xlat36) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat11.x = u_xlat33 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat4.xyz * vec3(u_xlat16_41);
    u_xlat11.x = u_xlat11.x + 1.0;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat11.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_11.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat11.xyz = vec3(u_xlat14) * u_xlat16_11.xyz;
    u_xlat16_35 = (-u_xlat34) + 1.0;
    u_xlat12 = u_xlat34 * u_xlat34;
    u_xlat1.x = dot(vec2(u_xlat12), u_xlat1.xx);
    u_xlat1.x = u_xlat1.x + 0.5;
    u_xlat16_8.x = u_xlat1.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat11.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat11.xyz;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat16_0 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat1.x = (-u_xlat3.x) + 1.0;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1;
    u_xlat0.x = u_xlat3.x * u_xlat16_0;
    u_xlat1.xyz = u_xlat5.xyz * u_xlat0.xxx;
    SV_Target0.xyz = u_xlat1.xyz * u_xlat16_9.xyz + u_xlat11.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD10 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube unity_SpecCube0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
varying highp vec4 vs_TEXCOORD10;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump float u_xlat16_3;
float u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
lowp vec4 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat12;
mediump vec3 u_xlat16_12;
float u_xlat14;
vec3 u_xlat15;
lowp vec3 u_xlat10_15;
mediump vec3 u_xlat16_19;
float u_xlat25;
float u_xlat26;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_35;
float u_xlat36;
bool u_xlatb36;
mediump float u_xlat16_41;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_2.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat16_2.xxx * _WorldSpaceLightPos0.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat34) + u_xlat16_2.xyz;
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat3.xyz;
    u_xlat34 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat14 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlat25 = _Gloss * _Gloss;
    u_xlat36 = u_xlat25 * u_xlat25;
    u_xlat4 = u_xlat34 * u_xlat36 + (-u_xlat34);
    u_xlat34 = u_xlat4 * u_xlat34 + 1.0;
    u_xlat34 = u_xlat34 * u_xlat34 + 1.00000001e-07;
    u_xlat36 = u_xlat36 * 0.318309873;
    u_xlat34 = u_xlat36 / u_xlat34;
    u_xlat36 = min(u_xlat14, 1.0);
    u_xlat4 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat15.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat26 = abs(u_xlat4) * u_xlat15.x + u_xlat25;
    u_xlat15.x = u_xlat36 * u_xlat15.x + u_xlat25;
    u_xlat25 = u_xlat25 * _Gloss;
    u_xlat25 = (-u_xlat25) * 0.280000001 + 1.0;
    u_xlat15.x = u_xlat15.x * abs(u_xlat4);
    u_xlat15.x = u_xlat36 * u_xlat26 + u_xlat15.x;
    u_xlat15.x = u_xlat15.x + 9.99999975e-06;
    u_xlat15.x = 0.5 / u_xlat15.x;
    u_xlat34 = u_xlat34 * u_xlat15.x;
    u_xlat34 = u_xlat34 * 3.14159274;
    u_xlat34 = max(u_xlat34, 9.99999975e-05);
    u_xlat34 = sqrt(u_xlat34);
    u_xlat34 = u_xlat36 * u_xlat34;
    u_xlat15.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_15.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;
    u_xlat15.xyz = u_xlat10_15.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat15.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat15.xyz = u_xlat15.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat36 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat34 = u_xlat34 * u_xlat36;
    u_xlat36 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb36 = vs_TEXCOORD8.z<u_xlat36;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat36 = max(u_xlat36, _LightShadowData.x);
    u_xlat5.xyz = vec3(u_xlat36) * _LightColor0.xyz;
    u_xlat6.xyz = vec3(u_xlat34) * u_xlat5.xyz;
    u_xlat34 = dot((-u_xlat1.xyz), u_xlat0.xyz);
    u_xlat34 = u_xlat34 + u_xlat34;
    u_xlat1.xyz = u_xlat0.xyz * (-vec3(u_xlat34)) + (-u_xlat1.xyz);
    u_xlat34 = (-_Gloss) + 1.0;
    u_xlat36 = (-u_xlat34) + 1.0;
    u_xlat16_35 = (-u_xlat36) * 0.699999988 + 1.70000005;
    u_xlat16_35 = u_xlat16_35 * u_xlat36;
    u_xlat16_35 = u_xlat16_35 * 6.0;
    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat1.xyz, u_xlat16_35);
    u_xlat16_35 = u_xlat10_7.w + -1.0;
    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
    u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(u_xlat16_35);
    u_xlat16_35 = -abs(u_xlat4) + 1.0;
    u_xlat1.x = -abs(u_xlat4) + 1.0;
    u_xlat16_41 = u_xlat16_35 * u_xlat16_35;
    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_41;
    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat12.x = u_xlat34 + (-u_xlat16_41);
    u_xlat16_9.xyz = u_xlat15.xyz * vec3(u_xlat16_41);
    u_xlat12.x = u_xlat12.x + 1.0;
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
    u_xlat16_10.xyz = (-u_xlat16_2.xyz) + u_xlat12.xxx;
    u_xlat16_10.xyz = vec3(u_xlat16_35) * u_xlat16_10.xyz + u_xlat16_2.xyz;
    u_xlat16_12.xyz = u_xlat16_8.xyz * u_xlat16_10.xyz;
    u_xlat12.xyz = vec3(u_xlat25) * u_xlat16_12.xyz;
    u_xlat16_35 = (-u_xlat3.x) + 1.0;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat3.x = dot(u_xlat3.xx, vec2(u_xlat36));
    u_xlat3.x = u_xlat3.x + 0.5;
    u_xlat16_8.x = u_xlat3.x + -1.0;
    u_xlat16_19.x = u_xlat16_35 * u_xlat16_35;
    u_xlat16_19.x = u_xlat16_19.x * u_xlat16_19.x;
    u_xlat16_35 = u_xlat16_35 * u_xlat16_19.x;
    u_xlat16_19.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_19.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
    u_xlat12.xyz = u_xlat6.xyz * u_xlat16_2.xyz + u_xlat12.xyz;
    u_xlat16_2.x = u_xlat1.x * u_xlat1.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;
    u_xlat16_1 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat3.x = (-u_xlat14) + 1.0;
    u_xlat16_2.x = u_xlat3.x * u_xlat3.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat3.x * u_xlat16_2.x;
    u_xlat16_3 = u_xlat16_8.x * u_xlat16_2.x + 1.0;
    u_xlat16_1 = u_xlat16_1 * u_xlat16_3;
    u_xlat1.x = u_xlat14 * u_xlat16_1;
    u_xlat0.w = 1.0;
    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD10.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_0.xyz = log2(u_xlat16_2.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_0.xyz = exp2(u_xlat16_0.xyz);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_0.xyz = max(u_xlat16_0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = u_xlat1.xxx * u_xlat5.xyz + u_xlat16_0.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_9.xyz + u_xlat12.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTPROBE_SH" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
}
}
 Pass {
  Name "FORWARD_DELTA"
  Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  GpuProgramID 76304
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTexture0, vec2(u_xlat19)).x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTexture0, vec2(u_xlat19)).x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTexture0, vec2(u_xlat19)).x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
    u_xlat19 = texture2D(_LightTexture0, u_xlat3.xy).w;
    u_xlatb3 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_20 = (u_xlatb3) ? 1.0 : 0.0;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat16_3.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
    u_xlat19 = texture2D(_LightTexture0, u_xlat3.xy).w;
    u_xlatb3 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_20 = (u_xlatb3) ? 1.0 : 0.0;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat16_3.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
    u_xlat19 = texture2D(_LightTexture0, u_xlat3.xy).w;
    u_xlatb3 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_20 = (u_xlatb3) ? 1.0 : 0.0;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat16_3.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat3.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat3.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat3.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
bool u_xlatb7;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat16;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
    u_xlatb7 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb7) ? 1.0 : 0.0;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = u_xlat0.x<u_xlat0.z;
    u_xlat16_8 = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_0.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_1.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_1.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat16_1.zzz * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat16 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat23 * u_xlat3.x + (-u_xlat23);
    u_xlat23 = u_xlat10 * u_xlat23 + 1.0;
    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat23 = u_xlat3.x / u_xlat23;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat16;
    u_xlat17 = min(u_xlat2.x, 1.0);
    u_xlat16 = u_xlat17 * u_xlat3.x + u_xlat16;
    u_xlat16 = abs(u_xlat21) * u_xlat16;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat16 = u_xlat17 * u_xlat10 + u_xlat16;
    u_xlat16 = u_xlat16 + 9.99999975e-06;
    u_xlat16 = 0.5 / u_xlat16;
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat17 * u_xlat16;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = vec3(_Metallic) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat16);
    u_xlat16_22 = (-u_xlat9) + 1.0;
    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat9));
    u_xlat16_6.x = u_xlat16_22 * u_xlat16_22;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_6.xyz * vec3(u_xlat16_22) + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat4.xyz;
    u_xlat16_1.x = u_xlat21 * u_xlat21;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat9 * u_xlat21 + 0.5;
    u_xlat16_8 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat9 = (-u_xlat2.x) + 1.0;
    u_xlat16_1.x = u_xlat9 * u_xlat9;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_9 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_9;
    u_xlat21 = u_xlat2.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
bool u_xlatb7;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat16;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
    u_xlatb7 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb7) ? 1.0 : 0.0;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = u_xlat0.x<u_xlat0.z;
    u_xlat16_8 = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_0.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_1.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_1.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat16_1.zzz * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat16 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat23 * u_xlat3.x + (-u_xlat23);
    u_xlat23 = u_xlat10 * u_xlat23 + 1.0;
    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat23 = u_xlat3.x / u_xlat23;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat16;
    u_xlat17 = min(u_xlat2.x, 1.0);
    u_xlat16 = u_xlat17 * u_xlat3.x + u_xlat16;
    u_xlat16 = abs(u_xlat21) * u_xlat16;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat16 = u_xlat17 * u_xlat10 + u_xlat16;
    u_xlat16 = u_xlat16 + 9.99999975e-06;
    u_xlat16 = 0.5 / u_xlat16;
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat17 * u_xlat16;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = vec3(_Metallic) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat16);
    u_xlat16_22 = (-u_xlat9) + 1.0;
    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat9));
    u_xlat16_6.x = u_xlat16_22 * u_xlat16_22;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_6.xyz * vec3(u_xlat16_22) + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat4.xyz;
    u_xlat16_1.x = u_xlat21 * u_xlat21;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat9 * u_xlat21 + 0.5;
    u_xlat16_8 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat9 = (-u_xlat2.x) + 1.0;
    u_xlat16_1.x = u_xlat9 * u_xlat9;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_9 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_9;
    u_xlat21 = u_xlat2.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
bool u_xlatb7;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat16;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
    u_xlatb7 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb7) ? 1.0 : 0.0;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = u_xlat0.x<u_xlat0.z;
    u_xlat16_8 = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_0.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_1.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_1.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat16_1.zzz * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat16 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat23 * u_xlat3.x + (-u_xlat23);
    u_xlat23 = u_xlat10 * u_xlat23 + 1.0;
    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat23 = u_xlat3.x / u_xlat23;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat16;
    u_xlat17 = min(u_xlat2.x, 1.0);
    u_xlat16 = u_xlat17 * u_xlat3.x + u_xlat16;
    u_xlat16 = abs(u_xlat21) * u_xlat16;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat16 = u_xlat17 * u_xlat10 + u_xlat16;
    u_xlat16 = u_xlat16 + 9.99999975e-06;
    u_xlat16 = 0.5 / u_xlat16;
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat17 * u_xlat16;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = vec3(_Metallic) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat16);
    u_xlat16_22 = (-u_xlat9) + 1.0;
    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat9));
    u_xlat16_6.x = u_xlat16_22 * u_xlat16_22;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_6.xyz * vec3(u_xlat16_22) + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat4.xyz;
    u_xlat16_1.x = u_xlat21 * u_xlat21;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat9 * u_xlat21 + 0.5;
    u_xlat16_8 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat9 = (-u_xlat2.x) + 1.0;
    u_xlat16_1.x = u_xlat9 * u_xlat9;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_9 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_9;
    u_xlat21 = u_xlat2.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
bool u_xlatb14;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.x = texture2D(_LightTexture0, u_xlat7.xy).w;
    u_xlatb14 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_3.x = (u_xlatb14) ? 1.0 : 0.0;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat7.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat7.x = texture2D(_LightTextureB0, u_xlat7.xx).x;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
bool u_xlatb14;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.x = texture2D(_LightTexture0, u_xlat7.xy).w;
    u_xlatb14 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_3.x = (u_xlatb14) ? 1.0 : 0.0;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat7.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat7.x = texture2D(_LightTextureB0, u_xlat7.xx).x;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
bool u_xlatb14;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.x = texture2D(_LightTexture0, u_xlat7.xy).w;
    u_xlatb14 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_3.x = (u_xlatb14) ? 1.0 : 0.0;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat7.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat7.x = texture2D(_LightTextureB0, u_xlat7.xx).x;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.x = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.x = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.x = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTexture0, vec2(u_xlat19)).x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTexture0, vec2(u_xlat19)).x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTexture0, vec2(u_xlat19)).x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
    u_xlat19 = texture2D(_LightTexture0, u_xlat3.xy).w;
    u_xlatb3 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_20 = (u_xlatb3) ? 1.0 : 0.0;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat16_3.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
    u_xlat19 = texture2D(_LightTexture0, u_xlat3.xy).w;
    u_xlatb3 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_20 = (u_xlatb3) ? 1.0 : 0.0;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat16_3.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
    u_xlat19 = texture2D(_LightTexture0, u_xlat3.xy).w;
    u_xlatb3 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_20 = (u_xlatb3) ? 1.0 : 0.0;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat16_3.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat3.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat3.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat3.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
bool u_xlatb7;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat16;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
    u_xlatb7 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb7) ? 1.0 : 0.0;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = u_xlat0.x<u_xlat0.z;
    u_xlat16_8 = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_0.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_1.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_1.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat16_1.zzz * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat16 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat23 * u_xlat3.x + (-u_xlat23);
    u_xlat23 = u_xlat10 * u_xlat23 + 1.0;
    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat23 = u_xlat3.x / u_xlat23;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat16;
    u_xlat17 = min(u_xlat2.x, 1.0);
    u_xlat16 = u_xlat17 * u_xlat3.x + u_xlat16;
    u_xlat16 = abs(u_xlat21) * u_xlat16;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat16 = u_xlat17 * u_xlat10 + u_xlat16;
    u_xlat16 = u_xlat16 + 9.99999975e-06;
    u_xlat16 = 0.5 / u_xlat16;
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat17 * u_xlat16;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = vec3(_Metallic) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat16);
    u_xlat16_22 = (-u_xlat9) + 1.0;
    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat9));
    u_xlat16_6.x = u_xlat16_22 * u_xlat16_22;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_6.xyz * vec3(u_xlat16_22) + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat4.xyz;
    u_xlat16_1.x = u_xlat21 * u_xlat21;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat9 * u_xlat21 + 0.5;
    u_xlat16_8 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat9 = (-u_xlat2.x) + 1.0;
    u_xlat16_1.x = u_xlat9 * u_xlat9;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_9 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_9;
    u_xlat21 = u_xlat2.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
bool u_xlatb7;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat16;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
    u_xlatb7 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb7) ? 1.0 : 0.0;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = u_xlat0.x<u_xlat0.z;
    u_xlat16_8 = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_0.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_1.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_1.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat16_1.zzz * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat16 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat23 * u_xlat3.x + (-u_xlat23);
    u_xlat23 = u_xlat10 * u_xlat23 + 1.0;
    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat23 = u_xlat3.x / u_xlat23;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat16;
    u_xlat17 = min(u_xlat2.x, 1.0);
    u_xlat16 = u_xlat17 * u_xlat3.x + u_xlat16;
    u_xlat16 = abs(u_xlat21) * u_xlat16;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat16 = u_xlat17 * u_xlat10 + u_xlat16;
    u_xlat16 = u_xlat16 + 9.99999975e-06;
    u_xlat16 = 0.5 / u_xlat16;
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat17 * u_xlat16;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = vec3(_Metallic) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat16);
    u_xlat16_22 = (-u_xlat9) + 1.0;
    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat9));
    u_xlat16_6.x = u_xlat16_22 * u_xlat16_22;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_6.xyz * vec3(u_xlat16_22) + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat4.xyz;
    u_xlat16_1.x = u_xlat21 * u_xlat21;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat9 * u_xlat21 + 0.5;
    u_xlat16_8 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat9 = (-u_xlat2.x) + 1.0;
    u_xlat16_1.x = u_xlat9 * u_xlat9;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_9 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_9;
    u_xlat21 = u_xlat2.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
bool u_xlatb7;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat16;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
    u_xlatb7 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb7) ? 1.0 : 0.0;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = u_xlat0.x<u_xlat0.z;
    u_xlat16_8 = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_0.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_1.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_1.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat16_1.zzz * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat16 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat23 * u_xlat3.x + (-u_xlat23);
    u_xlat23 = u_xlat10 * u_xlat23 + 1.0;
    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat23 = u_xlat3.x / u_xlat23;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat16;
    u_xlat17 = min(u_xlat2.x, 1.0);
    u_xlat16 = u_xlat17 * u_xlat3.x + u_xlat16;
    u_xlat16 = abs(u_xlat21) * u_xlat16;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat16 = u_xlat17 * u_xlat10 + u_xlat16;
    u_xlat16 = u_xlat16 + 9.99999975e-06;
    u_xlat16 = 0.5 / u_xlat16;
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat17 * u_xlat16;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = vec3(_Metallic) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat16);
    u_xlat16_22 = (-u_xlat9) + 1.0;
    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat9));
    u_xlat16_6.x = u_xlat16_22 * u_xlat16_22;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_6.xyz * vec3(u_xlat16_22) + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat4.xyz;
    u_xlat16_1.x = u_xlat21 * u_xlat21;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat9 * u_xlat21 + 0.5;
    u_xlat16_8 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat9 = (-u_xlat2.x) + 1.0;
    u_xlat16_1.x = u_xlat9 * u_xlat9;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_9 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_9;
    u_xlat21 = u_xlat2.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
bool u_xlatb14;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.x = texture2D(_LightTexture0, u_xlat7.xy).w;
    u_xlatb14 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_3.x = (u_xlatb14) ? 1.0 : 0.0;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat7.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat7.x = texture2D(_LightTextureB0, u_xlat7.xx).x;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
bool u_xlatb14;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.x = texture2D(_LightTexture0, u_xlat7.xy).w;
    u_xlatb14 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_3.x = (u_xlatb14) ? 1.0 : 0.0;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat7.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat7.x = texture2D(_LightTextureB0, u_xlat7.xx).x;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
bool u_xlatb14;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.x = texture2D(_LightTexture0, u_xlat7.xy).w;
    u_xlatb14 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_3.x = (u_xlatb14) ? 1.0 : 0.0;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat7.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat7.x = texture2D(_LightTextureB0, u_xlat7.xx).x;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.x = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.x = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.x = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTexture0, vec2(u_xlat19)).x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTexture0, vec2(u_xlat19)).x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTexture0, vec2(u_xlat19)).x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD3 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat3.xyz = u_xlat16_2.xyz * u_xlat3.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat3.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
    u_xlat19 = texture2D(_LightTexture0, u_xlat3.xy).w;
    u_xlatb3 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_20 = (u_xlatb3) ? 1.0 : 0.0;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat16_3.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
    u_xlat19 = texture2D(_LightTexture0, u_xlat3.xy).w;
    u_xlatb3 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_20 = (u_xlatb3) ? 1.0 : 0.0;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat16_3.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
bool u_xlatb3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat3.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
    u_xlat19 = texture2D(_LightTexture0, u_xlat3.xy).w;
    u_xlatb3 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_20 = (u_xlatb3) ? 1.0 : 0.0;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat16_20 = u_xlat19 * u_xlat16_20;
    u_xlat16_3.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat3.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat3.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat19 = texture2D(_LightTextureB0, vec2(u_xlat19)).x;
    u_xlat3.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD3 = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    vs_TEXCOORD5.xyz = u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
bool u_xlatb7;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat16;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
    u_xlatb7 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb7) ? 1.0 : 0.0;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = u_xlat0.x<u_xlat0.z;
    u_xlat16_8 = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_0.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_1.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_1.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat16_1.zzz * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat16 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat23 * u_xlat3.x + (-u_xlat23);
    u_xlat23 = u_xlat10 * u_xlat23 + 1.0;
    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat23 = u_xlat3.x / u_xlat23;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat16;
    u_xlat17 = min(u_xlat2.x, 1.0);
    u_xlat16 = u_xlat17 * u_xlat3.x + u_xlat16;
    u_xlat16 = abs(u_xlat21) * u_xlat16;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat16 = u_xlat17 * u_xlat10 + u_xlat16;
    u_xlat16 = u_xlat16 + 9.99999975e-06;
    u_xlat16 = 0.5 / u_xlat16;
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat17 * u_xlat16;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = vec3(_Metallic) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat16);
    u_xlat16_22 = (-u_xlat9) + 1.0;
    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat9));
    u_xlat16_6.x = u_xlat16_22 * u_xlat16_22;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_6.xyz * vec3(u_xlat16_22) + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat4.xyz;
    u_xlat16_1.x = u_xlat21 * u_xlat21;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat9 * u_xlat21 + 0.5;
    u_xlat16_8 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat9 = (-u_xlat2.x) + 1.0;
    u_xlat16_1.x = u_xlat9 * u_xlat9;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_9 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_9;
    u_xlat21 = u_xlat2.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
bool u_xlatb7;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat16;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
    u_xlatb7 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb7) ? 1.0 : 0.0;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = u_xlat0.x<u_xlat0.z;
    u_xlat16_8 = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_0.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_1.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_1.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat16_1.zzz * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat16 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat23 * u_xlat3.x + (-u_xlat23);
    u_xlat23 = u_xlat10 * u_xlat23 + 1.0;
    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat23 = u_xlat3.x / u_xlat23;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat16;
    u_xlat17 = min(u_xlat2.x, 1.0);
    u_xlat16 = u_xlat17 * u_xlat3.x + u_xlat16;
    u_xlat16 = abs(u_xlat21) * u_xlat16;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat16 = u_xlat17 * u_xlat10 + u_xlat16;
    u_xlat16 = u_xlat16 + 9.99999975e-06;
    u_xlat16 = 0.5 / u_xlat16;
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat17 * u_xlat16;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = vec3(_Metallic) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat16);
    u_xlat16_22 = (-u_xlat9) + 1.0;
    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat9));
    u_xlat16_6.x = u_xlat16_22 * u_xlat16_22;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_6.xyz * vec3(u_xlat16_22) + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat4.xyz;
    u_xlat16_1.x = u_xlat21 * u_xlat21;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat9 * u_xlat21 + 0.5;
    u_xlat16_8 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat9 = (-u_xlat2.x) + 1.0;
    u_xlat16_1.x = u_xlat9 * u_xlat9;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_9 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_9;
    u_xlat21 = u_xlat2.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
bool u_xlatb7;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat16;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
mediump float u_xlat16_22;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
    u_xlatb7 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_1.x = (u_xlatb7) ? 1.0 : 0.0;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = u_xlat0.x<u_xlat0.z;
    u_xlat16_8 = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat16_1.x = u_xlat16_8 * u_xlat16_1.x;
    u_xlat16_0.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_1.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_1.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat2.xyz = u_xlat16_1.zzz * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = inversesqrt(u_xlat23);
    u_xlat4.xyz = vec3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlat16 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat16 * u_xlat16;
    u_xlat10 = u_xlat23 * u_xlat3.x + (-u_xlat23);
    u_xlat23 = u_xlat10 * u_xlat23 + 1.0;
    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat23 = u_xlat3.x / u_xlat23;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat16;
    u_xlat17 = min(u_xlat2.x, 1.0);
    u_xlat16 = u_xlat17 * u_xlat3.x + u_xlat16;
    u_xlat16 = abs(u_xlat21) * u_xlat16;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat16 = u_xlat17 * u_xlat10 + u_xlat16;
    u_xlat16 = u_xlat16 + 9.99999975e-06;
    u_xlat16 = 0.5 / u_xlat16;
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = u_xlat17 * u_xlat16;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_1.xyz = vec3(_Metallic) * u_xlat16_1.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat23 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlatb23 = u_xlat23!=0.0;
    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat23 * u_xlat16;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat16);
    u_xlat16_22 = (-u_xlat9) + 1.0;
    u_xlat9 = dot(vec2(u_xlat9), vec2(u_xlat9));
    u_xlat16_6.x = u_xlat16_22 * u_xlat16_22;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_6.xyz * vec3(u_xlat16_22) + u_xlat16_1.xyz;
    u_xlat4.xyz = u_xlat16_1.xyz * u_xlat4.xyz;
    u_xlat16_1.x = u_xlat21 * u_xlat21;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat21 * u_xlat16_1.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat9 * u_xlat21 + 0.5;
    u_xlat16_8 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat9 = (-u_xlat2.x) + 1.0;
    u_xlat16_1.x = u_xlat9 * u_xlat9;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_1.x = u_xlat9 * u_xlat16_1.x;
    u_xlat16_9 = u_xlat16_8 * u_xlat16_1.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_9;
    u_xlat21 = u_xlat2.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_1.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
bool u_xlatb14;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.x = texture2D(_LightTexture0, u_xlat7.xy).w;
    u_xlatb14 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_3.x = (u_xlatb14) ? 1.0 : 0.0;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat7.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat7.x = texture2D(_LightTextureB0, u_xlat7.xx).x;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
bool u_xlatb14;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.x = texture2D(_LightTexture0, u_xlat7.xy).w;
    u_xlatb14 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_3.x = (u_xlatb14) ? 1.0 : 0.0;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat7.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat7.x = texture2D(_LightTextureB0, u_xlat7.xx).x;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD7 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 _ShadowOffsets[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _LightTextureB0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
bool u_xlatb14;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.x = texture2D(_LightTexture0, u_xlat7.xy).w;
    u_xlatb14 = 0.0<vs_TEXCOORD7.z;
    u_xlat16_3.x = (u_xlatb14) ? 1.0 : 0.0;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat7.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat7.x = texture2D(_LightTextureB0, u_xlat7.xx).x;
    u_xlat16_3.x = u_xlat7.x * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.x = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.x = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
    vs_TEXCOORD7.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD8 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _MainTex;
varying highp vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD7;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
float u_xlat7;
mediump float u_xlat16_8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
mediump float u_xlat16_20;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_1.xyz = texture2D(_BumpMap, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat1.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat16_2.zzz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat1.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat3.xyz = vec3(u_xlat19) * u_xlat4.xyz;
    u_xlat19 = dot(u_xlat0.xyz, u_xlat3.xyz);
    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat12 = _Gloss * _Gloss;
    u_xlat1.x = u_xlat12 * u_xlat12;
    u_xlat7 = u_xlat19 * u_xlat1.x + (-u_xlat19);
    u_xlat7 = u_xlat7 * u_xlat19 + 1.0;
    u_xlat7 = u_xlat7 * u_xlat7 + 1.00000001e-07;
    u_xlat1.x = u_xlat1.x * 0.318309873;
    u_xlat1.x = u_xlat1.x / u_xlat7;
    u_xlat7 = (-_Gloss) * _Gloss + 1.0;
    u_xlat13 = abs(u_xlat18) * u_xlat7 + u_xlat12;
    u_xlat19 = min(u_xlat0.x, 1.0);
    u_xlat12 = u_xlat19 * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 * abs(u_xlat18);
    u_xlat18 = -abs(u_xlat18) + 1.0;
    u_xlat12 = u_xlat19 * u_xlat13 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-06;
    u_xlat12 = 0.5 / u_xlat12;
    u_xlat12 = u_xlat1.x * u_xlat12;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = u_xlat19 * u_xlat12;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_1.xyz = texture2D(_MainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat1.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = u_xlat1.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb19 = u_xlat19!=0.0;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat19 = texture2D(_ShadowMapTexture, vs_TEXCOORD8.xy).x;
    u_xlatb19 = vs_TEXCOORD8.z<u_xlat19;
    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);
    u_xlat19 = max(u_xlat19, _LightShadowData.x);
    u_xlat3.x = texture2D(_LightTexture0, vs_TEXCOORD7.xy).w;
    u_xlat19 = u_xlat19 * u_xlat3.x;
    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
    u_xlat4.xyz = vec3(u_xlat12) * u_xlat3.xyz;
    u_xlat16_20 = (-u_xlat6) + 1.0;
    u_xlat6 = dot(vec2(u_xlat6), vec2(u_xlat6));
    u_xlat16_5.x = u_xlat16_20 * u_xlat16_20;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_5.x;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat18 * u_xlat18;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat18 * u_xlat16_2.x;
    u_xlat12 = (-_Gloss) + 1.0;
    u_xlat12 = (-u_xlat12) + 1.0;
    u_xlat6 = u_xlat6 * u_xlat12 + 0.5;
    u_xlat16_8 = u_xlat6 + -1.0;
    u_xlat16_6 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat16_2.x = u_xlat12 * u_xlat12;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
    u_xlat16_12 = u_xlat16_8 * u_xlat16_2.x + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_12;
    u_xlat0.x = u_xlat0.x * u_xlat16_6;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat0.xxx;
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec3 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
mediump float u_xlat16_9;
float u_xlat10;
float u_xlat15;
float u_xlat17;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_23;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat10_1 = textureCube(_ShadowMapTexture, vs_TEXCOORD8.xyz);
    u_xlat7 = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = u_xlat7<u_xlat0.x;
    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7 = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7 * u_xlat0.x;
    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_3.xyz = texture2D(_BumpMap, u_xlat3.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat3.xyz = u_xlat16_2.yyy * vs_TEXCOORD6.xyz;
    u_xlat3.xyz = u_xlat16_2.xxx * vs_TEXCOORD5.xyz + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat16_2.zzz * u_xlat1.xyz + u_xlat3.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat3.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat10 = u_xlat22 * u_xlat3.x + (-u_xlat22);
    u_xlat22 = u_xlat10 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat22 = u_xlat3.x / u_xlat22;
    u_xlat3.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat10 = abs(u_xlat21) * u_xlat3.x + u_xlat15;
    u_xlat17 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat17 * u_xlat3.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat17 * u_xlat10 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat17 * u_xlat15;
    u_xlat3.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_3.xyz = texture2D(_MainTex, u_xlat3.xy).xyz;
    u_xlat3.xyz = u_xlat10_3.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat3.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = u_xlat3.xyz * vs_COLOR0.xyz;
    u_xlat16_2.xyz = vec3(_Metallic) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_23 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_23 * u_xlat16_23;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_23 = u_xlat16_23 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;
    u_xlat4.xyz = u_xlat16_2.xyz * u_xlat4.xyz;
    u_xlat16_2.x = u_xlat21 * u_xlat21;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat21 * u_xlat16_2.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_9 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_2.x = u_xlat8 * u_xlat8;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat8 * u_xlat16_2.x;
    u_xlat16_8 = u_xlat16_9 * u_xlat16_2.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_2.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat3.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"#ifdef VERTEX
#version 100

uniform 	vec4 _LightPositionRange;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
attribute highp vec4 in_POSITION0;
attribute highp vec3 in_NORMAL0;
attribute highp vec4 in_TANGENT0;
attribute highp vec2 in_TEXCOORD0;
attribute highp vec2 in_TEXCOORD1;
attribute highp vec2 in_TEXCOORD2;
attribute highp vec4 in_COLOR0;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat13;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
    vs_TEXCOORD1.zw = in_TEXCOORD2.xy;
    vs_TEXCOORD3 = u_xlat0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_TEXCOORD4.xyz = u_xlat1.xyz;
    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
    vs_TEXCOORD5.xyz = u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = inversesqrt(u_xlat13);
    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD7.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
    return;
}

#endif
#ifdef FRAGMENT
#version 100
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif
#if !defined(GL_EXT_shader_texture_lod)
#define texture1DLodEXT texture1D
#define texture2DLodEXT texture2D
#define texture2DProjLodEXT texture2DProj
#define texture3DLodEXT texture3D
#define textureCubeLodEXT textureCube
#endif

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightProjectionParams;
uniform 	mediump vec4 _LightShadowData;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _BumpMap_ST;
uniform 	float _Metallic;
uniform 	float _Gloss;
uniform lowp sampler2D _BumpMap;
uniform highp sampler2D _LightTextureB0;
uniform highp samplerCube _LightTexture0;
uniform lowp sampler2D _MainTex;
uniform lowp samplerCube _ShadowMapTexture;
varying highp vec2 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD3;
varying highp vec3 vs_TEXCOORD4;
varying highp vec3 vs_TEXCOORD5;
varying highp vec3 vs_TEXCOORD6;
varying highp vec4 vs_COLOR0;
varying highp vec3 vs_TEXCOORD7;
varying highp vec3 vs_TEXCOORD8;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
float u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
mediump float u_xlat16_10;
float u_xlat15;
float u_xlat16;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD8.xyz, vs_TEXCOORD8.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlat7.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat7.xyz, 0.0);
    u_xlat1.w = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
    u_xlatb0 = lessThan(u_xlat1, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat16_3.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
    u_xlat7.x = textureCube(_LightTexture0, vs_TEXCOORD7.xyz).w;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;
    u_xlat10_2.xyz = texture2D(_BumpMap, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat2.xyz = u_xlat16_3.yyy * vs_TEXCOORD6.xyz;
    u_xlat2.xyz = u_xlat16_3.xxx * vs_TEXCOORD5.xyz + u_xlat2.xyz;
    u_xlat1.xyz = u_xlat16_3.zzz * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat21) + u_xlat2.xyz;
    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;
    u_xlat21 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat5.xyz;
    u_xlat22 = dot(u_xlat1.xyz, u_xlat4.xyz);
    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat8 = dot(u_xlat2.xyz, u_xlat4.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat15 = _Gloss * _Gloss;
    u_xlat2.x = u_xlat15 * u_xlat15;
    u_xlat9 = u_xlat22 * u_xlat2.x + (-u_xlat22);
    u_xlat22 = u_xlat9 * u_xlat22 + 1.0;
    u_xlat22 = u_xlat22 * u_xlat22 + 1.00000001e-07;
    u_xlat2.x = u_xlat2.x * 0.318309873;
    u_xlat22 = u_xlat2.x / u_xlat22;
    u_xlat2.x = (-_Gloss) * _Gloss + 1.0;
    u_xlat9 = abs(u_xlat21) * u_xlat2.x + u_xlat15;
    u_xlat16 = min(u_xlat1.x, 1.0);
    u_xlat15 = u_xlat16 * u_xlat2.x + u_xlat15;
    u_xlat15 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = -abs(u_xlat21) + 1.0;
    u_xlat15 = u_xlat16 * u_xlat9 + u_xlat15;
    u_xlat15 = u_xlat15 + 9.99999975e-06;
    u_xlat15 = 0.5 / u_xlat15;
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat15 = u_xlat15 * 3.14159274;
    u_xlat15 = max(u_xlat15, 9.99999975e-05);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat16 * u_xlat15;
    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat2.xyz * vs_COLOR0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
    u_xlat16_3.xyz = vec3(_Metallic) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
    u_xlat22 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlatb22 = u_xlat22!=0.0;
    u_xlat22 = u_xlatb22 ? 1.0 : float(0.0);
    u_xlat15 = u_xlat22 * u_xlat15;
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat16_24 = (-u_xlat8) + 1.0;
    u_xlat8 = dot(vec2(u_xlat8), vec2(u_xlat8));
    u_xlat16_6.x = u_xlat16_24 * u_xlat16_24;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_6.x;
    u_xlat16_6.xyz = (-u_xlat16_3.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;
    u_xlat4.xyz = u_xlat16_3.xyz * u_xlat4.xyz;
    u_xlat16_3.x = u_xlat21 * u_xlat21;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat21 * u_xlat16_3.x;
    u_xlat21 = (-_Gloss) + 1.0;
    u_xlat21 = (-u_xlat21) + 1.0;
    u_xlat21 = u_xlat8 * u_xlat21 + 0.5;
    u_xlat16_10 = u_xlat21 + -1.0;
    u_xlat16_21 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat8 = (-u_xlat1.x) + 1.0;
    u_xlat16_3.x = u_xlat8 * u_xlat8;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_3.x = u_xlat8 * u_xlat16_3.x;
    u_xlat16_8 = u_xlat16_10 * u_xlat16_3.x + 1.0;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_8;
    u_xlat21 = u_xlat1.x * u_xlat16_21;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat16_3.x = (-_Metallic) * 0.779083729 + 0.779083729;
    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_3.xxx;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_3.xyz + u_xlat4.xyz;
    SV_Target0.w = 0.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_COMBINED" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" "DIRLIGHTMAP_SEPARATE" "LIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
""
}
}
}
 Pass {
  Name "Meta"
  Tags { "LIGHTMODE" = "META" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  Cull Off
  GpuProgramID 160376
}
}
Fallback "Standard"
}